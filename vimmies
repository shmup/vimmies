#!/usr/bin/env bash

# vimmies: Vim plugin manager
# Dependencies: fzy, git, curl, nvm, npm, make, gcc
# Usage: ./vimmies.sh [OPTION]

set -euo pipefail
IFS=$'\n\t'

VIM_PATH="$HOME/.vim"
JUNK_PATH="$VIM_PATH/junk"
PLUGINS_PATH="$VIM_PATH/pack/plugins/start"
CACHE="$JUNK_PATH/cache"
REPO="$HOME/src/vim"
PROCS=8

cd "$VIM_PATH"

export NVM_DIR="$HOME/.nvm"

help_message="$(basename "$0") [OPTION]
  -h, --help             Show this help message
  -s, --setup            Initial setup for plugins/completion/junk dirs
  -U, --upgrade-vim      Upgrade Vim to the latest version
  -c, --plugin-changes   Show recent changes in plugins
  -u, --update-plugins   Update all plugins or a specific one with -a
  -i, --install-plugin <url>  Install a plugin from the given URL
  -r, --remove-plugin <name>  Remove a plugin by name
  -f, --flush-junk       Remove all files in junk directories
"

bail() {
  echo "$1"
  exit 0
}

setup() {
  git submodule update --init --recursive
  mkdir -p "$JUNK_PATH/backup" "$JUNK_PATH/swp" "$JUNK_PATH/undo" "$JUNK_PATH/view"

  if [[ "$OSTYPE" == "darwin"* ]]; then
    brew install bash-completion
  fi
  sudo ln -sf "$VIM_PATH/vimmies_completion" /etc/bash_completion.d/vimmies_completion
}

flush_junk() {
  local dirs
  dirs=$(find "$JUNK_PATH" -mindepth 1 -maxdepth 1 -type d)

  if [[ -z $dirs ]]; then
    echo "Nothing to nuke"
    exit 0
  fi

  echo "Directories to be removed:"
  echo "$dirs"
  read -rp "Are you sure you want to delete these directories? [y/N] " response

  if [[ $response =~ ^[Yy]$ ]]; then
    # error on line 57, Use "${var:?}" to ensure this never expands to /* .. Code: rm -rf "$JUNK_PATH"/*
    [[ -d "$JUNK_PATH" ]] || exit 1
    echo "Junk directories flushed."
  fi
}

update_plugins() {
  if [[ $1 == "-a" ]]; then
    cd "$VIM_PATH"
    git submodule update --remote --merge
    curl -fsSL https://raw.githubusercontent.com/junegunn/fzf/master/plugin/fzf.vim -o "$VIM_PATH/after/plugin/fzf.vim"
    plugin_shortlog
  else
    if command -v fzy &>/dev/null; then
      local plugin
      plugin=$(find "$PLUGINS_PATH" -maxdepth 1 -mindepth 1 -printf '%f\n' | fzy -l 20)
      [[ -n $plugin ]] || exit 0
      git submodule update --remote --merge "$PLUGINS_PATH/$plugin"
    fi
  fi

  vim -c "UpdatePluginDocs" -c "qa"

  # Define colors as associative array
  declare -A colorschemes=(
    [modest]="matveyt/vim-modest/master/colors/modest.vim"
    [dogrun]="wadackel/vim-dogrun/main/colors/dogrun.vim"
    [apprentice]="shmup/Apprentice/master/colors/apprentice.vim"
    [saturnite]="shmup/vim-saturnite/main/colors/saturnite.vim"
    [tuftish]="benwr/tuftish/master/colors/tuftish.vim"
    [warlock]="hardselius/warlock/master/colors/warlock.vim"
    [256_noir]="andreasvc/vim-256noir/master/colors/256_noir.vim"
    [flattened_light]="romainl/flattened/master/colors/flattened_light.vim"
  )

  # Download colorschemes in parallel
  for name in "${!colorschemes[@]}"; do
    curl -fsSL "https://raw.githubusercontent.com/${colorschemes[$name]}" \
      -o "$VIM_PATH/colors/${name}.vim" 2>/dev/null &
  done
  wait

  cd "$PLUGINS_PATH/coc.nvim"
  npm i
  vim -c "CocUpdateSync" -c "qa"
}

plugin_shortlog() {
    local modified_modules
    modified_modules=$(git status -s | grep -E '^\s*M.*pack/plugins/start/' | awk '{print $2}')

    if [[ -z "$modified_modules" ]]; then
        echo "No modified plugins"
        return
    fi

    while IFS= read -r module; do
        echo "=== ${module##*/} ==="
        (cd "$module" && git log -5 --oneline)
        echo
    done <<< "$modified_modules"
}

install_deps() {
  sudo dnf install \
    gcc \
    make \
    ncurses-devel \
    gtk2-devel \
    libX11-devel \
    libXt-devel \
    lua-devel \
    python3-devel \
    perl-devel \
    perl-ExtUtils-Embed \
    ruby-devel \
    libacl-devel \
    gpm-devel \
    libXpm-devel \
    libsodium-devel
}

upgrade_vim() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    brew update && brew upgrade vim && brew cleanup vim
    exit 0
  fi

  if [[ ! -d "$REPO" ]]; then
    git clone https://github.com/vim/vim.git "$REPO"
  fi

  cd "$REPO"
  git pull
  make distclean
  ./configure --with-features=huge \
    --enable-python3interp \
    --enable-luainterp=yes \
    --enable-perlinterp=yes \
    --enable-rubyinterp=yes \
    --enable-sodiuminterp=yes \
    --with-plthome=/usr/local
  make -j "$PROCS"
  sudo make -j "$PROCS" install
}

install_plugin() {
  local plugin_url
  if [[ -z $1 ]]; then
    plugin_url=$(grep -vxFf <(ls "$PLUGINS_PATH") <"$CACHE" | fzy -l 20)
  else
    plugin_url="$1"
  fi
  [[ -n $plugin_url ]] || exit 0
  git submodule add --force "$plugin_url" "$PLUGINS_PATH/$(basename "$plugin_url" .git)"
}

remove_plugin() {
  local plugin
  if command -v fzy &>/dev/null; then
    plugin=$(find "$PLUGINS_PATH" -maxdepth 1 -mindepth 1 -printf '%f\n' | fzy -l 20)
  else
    plugin="$1"
  fi
  [[ -n $plugin ]] || exit 0
  [[ -d "$PLUGINS_PATH/$plugin" ]] || bail "Submodule doesn't exist"

  cd "$PLUGINS_PATH/$plugin"
  git remote get-url origin >>"$CACHE"
  cd "$VIM_PATH"

  git submodule deinit -f "$PLUGINS_PATH/$plugin"
  git rm -f "$PLUGINS_PATH/$plugin"
  rm -rf ".git/modules/${PLUGINS_PATH:?}/${plugin:?}" "${PLUGINS_PATH:?}/${plugin:?}"
}

plugin_changes() {
  local submodules
  submodules=$(git submodule status | awk '{print $2}')
  for sub in $submodules; do
    echo "Submodule: $sub"
    (cd "$VIM_PATH/$sub" && git log -7 --oneline)
    echo
  done
}

case "${1:-}" in
-h | --help)
  echo "$help_message"
  ;;
-s | --setup)
  setup
  ;;
-d | --install-deps)
  install_deps
  ;;
-i | --install-plugin)
  install_plugin "${2:-}"
  ;;
-r | --remove-plugin)
  remove_plugin "${2:-}"
  ;;
-u | --update-plugins)
  update_plugins "${2:-}"
  ;;
-U | --upgrade-vim)
  upgrade_vim
  ;;
-c | --plugin-changes)
  plugin_changes
  ;;
-f | --flush-junk)
  flush_junk
  ;;
*)
  echo "$help_message"
  ;;
esac
