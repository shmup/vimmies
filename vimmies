#!/usr/bin/env bash
# http://ix.io/2Evs/bash
# currently requires https://github.com/jhawthorn/fzy

# usage: ./vimmies -h

VIM_PATH=$HOME/.vim
JUNK_PATH=$VIM_PATH/junk
PLUGINS_PATH=$VIM_PATH/pack/plugins/start
CACHE=$VIM_PATH/junk/cache

REPO="$HOME/src/vim"

PROCS=8

help="$(basename "$0") [OPTION]
  - setup                 initial setup for plugins/completion/junk dirs
  - install-plugin <url>  install submodule
  - remove-plugin <name>  remove submodule
  - update-plugins        update all the submodules in $PLUGINS_PATH
  - upgrade-vim           get latest in $REPO and compile
  - plugin-changes        print out last few commits from plugins
  - flush-junk            rm -rf all files in $JUNK_PATH dirs
"

bail() { echo "$1" && exit 0; } # clean msg & exit

_setup() {
  git submodule update --init --recursive
  mkdir -p "$VIM_PATH/junk/{backup,swp,undo,view}"

  if [[ "$OSTYPE" == "darwin"* ]]; then
    brew install bash-completion
    sudo ln -s "$VIM_PATH/vimmies_completion" /etc/bash_completion.d/vimmies_completion
  else
    sudo ln -s "$VIM_PATH/vimmies_completion" /etc/bash_completion.d/vimmies_completion
  fi
}

_flush-junk() {
  local files
  files=$(find junk/ -maxdepth 1 -mindepth 1 -type d -exec rm -rf "{}/*" \;)
  [[ -z $files ]] && echo "aint shit to nuke" && exit 0

  echo "$files"
  read -p "sure you wanna nuke these? " -n 1 -r

  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    rm -rf "$JUNK_PATH/swp/*"
    rm -rf "$JUNK_PATH/undo/*"
    rm -rf "$JUNK_PATH/view/*"
    rm -rf "$JUNK_PATH/backup/*"
  fi
}

_update-plugins() {
  if [[ $2 == "-a" ]]; then
    git submodule update --remote --merge
    curl -q https://raw.githubusercontent.com/junegunn/fzf/master/plugin/fzf.vim > "$VIM_PATH/after/plugin/fzf.vim"
  else
    if ! [ -x "$(command -v fzy -l 100)" ]; then
      PLUGIN=$2
    else
      PLUGIN=$(ls $PLUGINS_PATH | fzy -l 100)
    fi
    [[ -z $PLUGIN ]] && exit 0
    git submodule update --remote --merge -- "$PLUGINS_PATH/$PLUGIN"
  fi
  curl -q https://raw.githubusercontent.com/matveyt/vim-modest/master/colors/modest.vim > "$VIM_PATH/colors/modest.vim" &
  curl -q https://raw.githubusercontent.com/wadackel/vim-dogrun/main/colors/dogrun.vim > "$VIM_PATH/colors/dogrun.vim" &
  curl -q https://raw.githubusercontent.com/romainl/Apprentice/master/colors/apprentice.vim > "$VIM_PATH/colors/apprentice.vim" &
  curl -q https://raw.githubusercontent.com/habamax/vim-saturnite/master/colors/saturnite.vim > "$VIM_PATH/colors/saturnite.vim" &
  curl -q https://git.sr.ht/~shmup/paper.vim/blob/main/colors/paper.vim> "$VIM_PATH/colors/paper.vim" &
  curl -q https://raw.githubusercontent.com/benwr/tuftish/master/colors/tuftish.vim > "$VIM_PATH/colors/tuftish.vim" &
  curl -q https://raw.githubusercontent.com/hardselius/warlock/master/colors/warlock.vim > "$VIM_PATH/colors/warlock.vim" &
  curl -q https://raw.githubusercontent.com/andreasvc/vim-256noir/master/colors/256_noir.vim > "$VIM_PATH/colors/256_noir.vim" &
  curl -q https://raw.githubusercontent.com/romainl/flattened/master/colors/flattened_light.vim > "$VIM_PATH/colors/flattened_light.vim" &

  cd "$PLUGINS_PATH/coc.nvim" && npm i
}

_upgrade-vim() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    brew update && brew upgrade vim && brew cleanup vim && exit 0
  fi

  if cd "$REPO"; then git pull; else git clone https://github.com/vim/vim.git "$REPO"; fi

  # sudo rm -rf /usr/local/share/vim /usr/bin/vim

  cd "$REPO" || exit

  make distclean

  ./configure --with-features=huge --enable-python3interp \
    --enable-luainterp=yes \
    && make -j "$PROCS" && sudo make -j "$PROCS" install
}

_install-plugin() {
  local installed_plugins

  # Get a list of installed plugin directories as basenames
  installed_plugins=$(find "$PLUGINS_PATH" -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)

  if [[ -z $2 ]]; then
    # filter out installed plugins from cache by matching the end of the URL with directory names
    PLUGIN=$(grep -vFf <(echo "${installed_plugins// /.git$'\n'}") "$CACHE" | sort | uniq | fzy -l 100)
  else
    PLUGIN=$2
  fi

  [[ -z $PLUGIN ]] && exit 0;

  cd "$PLUGINS_PATH" || exit
  git submodule add --force "$PLUGIN"
}

_remove-plugin() {
  if ! [ -x "$(command -v fzy -l 100)" ]; then
    PLUGIN=$2
  else
    PLUGIN=$(ls $PLUGINS_PATH | fzy -l 100)
  fi

  [[ -z $PLUGIN ]] && exit 0;

  if [[ ! -d $PLUGINS_PATH/$PLUGIN ]]; then bail "Submodule doesn't exist"; fi

  # cache some shit and trim dupes
  cd "$PLUGINS_PATH/$PLUGIN" || exit
  git remote get-url origin >> "$CACHE"
  [ -d "$OLDPWD" ] && cd "$OLDPWD" || exit

  git submodule deinit -f "$PLUGINS_PATH/$PLUGIN"
  git rm --cached "$PLUGINS_PATH/$PLUGIN"
  git rm -rf "$PLUGINS_PATH/$PLUGIN"
  rm -Rf ".git/modules/$PLUGINS_PATH/$PLUGIN"
  rm -Rf "${PLUGINS_PATH:?}/$PLUGIN"
}

_plugin-changes() {
  local status_output submodule_paths
  status_output=$(git status --porcelain)
  submodule_paths=$(echo "${status_output}" | grep 'start/' | awk '{print $2}')

  for path in ${submodule_paths}; do
    echo "Submodule: $path"
    (cd "${VIM_PATH}/${path}" && git log -7 --oneline)
    echo
  done
}

if [[ $(type -t _"$1") = 'function' ]]; then
    # run all functions from .vim but return you back at the end
    cd "$VIM_PATH" || exit
    _$1 $*
    [ -d "$OLDPWD" ] && cd "$OLDPWD" || exit
else
  echo "$help"
fi
